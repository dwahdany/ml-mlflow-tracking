name: Update MLflow Versions

on:
    schedule:
        # Check for new MLflow releases daily at 1 AM UTC
        - cron: "0 1 * * *"
    workflow_dispatch:

jobs:
    check-and-update:
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Check for new MLflow Python version
              id: check-python
              run: |
                  # Get the latest MLflow version from PyPI
                  LATEST_VERSION=$(curl -s https://pypi.org/pypi/mlflow/json | jq -r '.info.version')

                  # Get current version from the workflow file
                  CURRENT_VERSION=$(grep -o 'MLFLOW_VERSION: [0-9.]*' .github/workflows/docker-build.yml | cut -d' ' -f2)

                  echo "Latest MLflow Python version: $LATEST_VERSION"
                  echo "Current Python version: $CURRENT_VERSION"

                  if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
                    echo "needs-update=true" >> $GITHUB_OUTPUT
                    echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
                    echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                    echo "New MLflow Python version detected: $LATEST_VERSION"
                  else
                    echo "needs-update=false" >> $GITHUB_OUTPUT
                    echo "No new MLflow Python version"
                  fi

            - name: Check for new MLflow Go version
              id: check-go
              run: |
                  # Get the latest MLflow Go version from GitHub releases
                  LATEST_VERSION=$(curl -s https://api.github.com/repos/mlflow/mlflow-go/releases/latest | jq -r '.tag_name' | sed 's/^v//')

                  # If that fails, try checking Go module versions
                  if [ "$LATEST_VERSION" = "null" ] || [ -z "$LATEST_VERSION" ]; then
                    echo "Trying Go module proxy..."
                    LATEST_VERSION=$(curl -s "https://proxy.golang.org/github.com/mlflow/mlflow-go/@latest" | jq -r '.Version' | sed 's/^v//')
                  fi

                  # Get current version from the workflow file
                  CURRENT_VERSION=$(grep -o 'MLFLOW_GO_VERSION: [0-9.]*' .github/workflows/docker-build.yml | cut -d' ' -f2)

                  echo "Latest MLflow Go version: $LATEST_VERSION"
                  echo "Current Go version: $CURRENT_VERSION"

                  if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ] && [ "$LATEST_VERSION" != "null" ] && [ -n "$LATEST_VERSION" ]; then
                    echo "needs-update=true" >> $GITHUB_OUTPUT
                    echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
                    echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                    echo "New MLflow Go version detected: $LATEST_VERSION"
                  else
                    echo "needs-update=false" >> $GITHUB_OUTPUT
                    echo "No new MLflow Go version found or version is the same"
                  fi

            - name: Update MLflow versions
              if: steps.check-python.outputs.needs-update == 'true' || steps.check-go.outputs.needs-update == 'true'
              run: |
                  # Update Python version if needed
                  if [ "${{ steps.check-python.outputs.needs-update }}" = "true" ]; then
                    sed -i "s/MLFLOW_VERSION: ${{ steps.check-python.outputs.current-version }}/MLFLOW_VERSION: ${{ steps.check-python.outputs.latest-version }}/g" .github/workflows/docker-build.yml
                    echo "Updated MLflow Python version to ${{ steps.check-python.outputs.latest-version }}"
                  fi

                  # Update Go version if needed
                  if [ "${{ steps.check-go.outputs.needs-update }}" = "true" ]; then
                    sed -i "s/MLFLOW_GO_VERSION: ${{ steps.check-go.outputs.current-version }}/MLFLOW_GO_VERSION: ${{ steps.check-go.outputs.latest-version }}/g" .github/workflows/docker-build.yml
                    echo "Updated MLflow Go version to ${{ steps.check-go.outputs.latest-version }}"
                  fi

            - name: Create Pull Request
              if: steps.check-python.outputs.needs-update == 'true' || steps.check-go.outputs.needs-update == 'true'
              id: create-pr
              uses: peter-evans/create-pull-request@v5
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  commit-message: |
                      Update MLflow versions

                      ${{ steps.check-python.outputs.needs-update == 'true' && format('- Python: {0} → {1}', steps.check-python.outputs.current-version, steps.check-python.outputs.latest-version) || '' }}
                      ${{ steps.check-go.outputs.needs-update == 'true' && format('- Go: {0} → {1}', steps.check-go.outputs.current-version, steps.check-go.outputs.latest-version) || '' }}
                  title: "Update MLflow versions"
                  body: |
                      This PR updates MLflow versions to their latest releases.

                      ## Changes
                      ${{ steps.check-python.outputs.needs-update == 'true' && format('- **Python MLflow**: {0} → {1}', steps.check-python.outputs.current-version, steps.check-python.outputs.latest-version) || '' }}
                      ${{ steps.check-go.outputs.needs-update == 'true' && format('- **Go MLflow**: {0} → {1}', steps.check-go.outputs.current-version, steps.check-go.outputs.latest-version) || '' }}

                      ## Release Notes
                      ${{ steps.check-python.outputs.needs-update == 'true' && format('- [MLflow Python {0}](https://github.com/mlflow/mlflow/releases/tag/v{0})', steps.check-python.outputs.latest-version) || '' }}
                      ${{ steps.check-go.outputs.needs-update == 'true' && format('- [MLflow Go {0}](https://github.com/mlflow/mlflow-go/releases/tag/v{0})', steps.check-go.outputs.latest-version) || '' }}

                      This PR was automatically created by the update workflow.
                  branch: update-mlflow-versions-${{ github.run_number }}
                  delete-branch: true

            - name: Auto-merge Pull Request
              if: (steps.check-python.outputs.needs-update == 'true' || steps.check-go.outputs.needs-update == 'true') && steps.create-pr.outputs.pull-request-number
              run: |
                  # Wait a moment for the PR to be fully created
                  sleep 5

                  # Auto-merge the PR
                  gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} --auto --squash
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Summary
              if: always()
              run: |
                  echo "## MLflow Version Update Summary" >> $GITHUB_STEP_SUMMARY
                  echo "| Component | Current | Latest | Update Needed |" >> $GITHUB_STEP_SUMMARY
                  echo "|-----------|---------|--------|---------------|" >> $GITHUB_STEP_SUMMARY
                  echo "| Python | ${{ steps.check-python.outputs.current-version || 'N/A' }} | ${{ steps.check-python.outputs.latest-version || 'N/A' }} | ${{ steps.check-python.outputs.needs-update || 'false' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Go | ${{ steps.check-go.outputs.current-version || 'N/A' }} | ${{ steps.check-go.outputs.latest-version || 'N/A' }} | ${{ steps.check-go.outputs.needs-update || 'false' }} |" >> $GITHUB_STEP_SUMMARY

                  if [ "${{ steps.create-pr.outputs.pull-request-number }}" != "" ]; then
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "✅ **Pull Request Created**: #${{ steps.create-pr.outputs.pull-request-number }}" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "ℹ️ **No updates needed** - All versions are current" >> $GITHUB_STEP_SUMMARY
                  fi
