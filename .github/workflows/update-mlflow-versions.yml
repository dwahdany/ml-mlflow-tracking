name: Update MLflow Versions

on:
    schedule:
        # Check for new MLflow releases daily at 1 AM UTC
        - cron: "0 1 * * *"
    workflow_dispatch:

jobs:
    check-and-update:
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

            - name: Check for new MLflow Python version
              id: check-python
              run: |
                  # Get the latest MLflow version from PyPI
                  LATEST_VERSION=$(curl -s https://pypi.org/pypi/mlflow/json | jq -r '.info.version')

                  # Get current version from the config file
                  CURRENT_VERSION=$(jq -r '.mlflow.python' .mlflow-versions.json)

                  echo "Latest MLflow Python version: $LATEST_VERSION"
                  echo "Current Python version: $CURRENT_VERSION"

                  if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
                    echo "needs-update=true" >> $GITHUB_OUTPUT
                    echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
                    echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                    echo "New MLflow Python version detected: $LATEST_VERSION"
                  else
                    echo "needs-update=false" >> $GITHUB_OUTPUT
                    echo "No new MLflow Python version"
                  fi

            - name: Check for new MLflow Go version
              id: check-go
              run: |
                  # Get the latest MLflow Go version from GitHub releases
                  LATEST_VERSION=$(curl -s https://api.github.com/repos/mlflow/mlflow-go/releases/latest | jq -r '.tag_name' | sed 's/^v//')

                  # If that fails, try checking Go module versions
                  if [ "$LATEST_VERSION" = "null" ] || [ -z "$LATEST_VERSION" ]; then
                    echo "Trying Go module proxy..."
                    LATEST_VERSION=$(curl -s "https://proxy.golang.org/github.com/mlflow/mlflow-go/@latest" | jq -r '.Version' | sed 's/^v//')
                  fi

                  # Get current version from the config file
                  CURRENT_VERSION=$(jq -r '.mlflow.go' .mlflow-versions.json)

                  echo "Latest MLflow Go version: $LATEST_VERSION"
                  echo "Current Go version: $CURRENT_VERSION"

                  if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ] && [ "$LATEST_VERSION" != "null" ] && [ -n "$LATEST_VERSION" ]; then
                    echo "needs-update=true" >> $GITHUB_OUTPUT
                    echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
                    echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                    echo "New MLflow Go version detected: $LATEST_VERSION"
                  else
                    echo "needs-update=false" >> $GITHUB_OUTPUT
                    echo "No new MLflow Go version found or version is the same"
                  fi

            - name: Update MLflow versions
              if: steps.check-python.outputs.needs-update == 'true' || steps.check-go.outputs.needs-update == 'true'
              run: |
                  # Create a temporary file with updates
                  cp .mlflow-versions.json temp_versions.json

                  # Update Python version if needed
                  if [ "${{ steps.check-python.outputs.needs-update }}" = "true" ]; then
                    jq '.mlflow.python = "${{ steps.check-python.outputs.latest-version }}"' temp_versions.json > tmp.json && mv tmp.json temp_versions.json
                    echo "Updated MLflow Python version to ${{ steps.check-python.outputs.latest-version }}"
                  fi

                  # Update Go version if needed
                  if [ "${{ steps.check-go.outputs.needs-update }}" = "true" ]; then
                    jq '.mlflow.go = "${{ steps.check-go.outputs.latest-version }}"' temp_versions.json > tmp.json && mv tmp.json temp_versions.json
                    echo "Updated MLflow Go version to ${{ steps.check-go.outputs.latest-version }}"
                  fi

                  # Update last_updated timestamp using date command
                  TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                  jq --arg timestamp "$TIMESTAMP" '.last_updated = $timestamp' temp_versions.json > tmp.json && mv tmp.json temp_versions.json

                  # Replace the original file
                  mv temp_versions.json .mlflow-versions.json

                  echo "Updated timestamp to: $TIMESTAMP"

            - name: Commit and Push Changes
              if: steps.check-python.outputs.needs-update == 'true' || steps.check-go.outputs.needs-update == 'true'
              run: |
                  # Configure git
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"

                  # Add and commit changes
                  git add .mlflow-versions.json

                  # Create commit message
                  COMMIT_MSG="Update MLflow versions"
                  if [ "${{ steps.check-python.outputs.needs-update }}" = "true" ]; then
                    COMMIT_MSG="$COMMIT_MSG - Python: ${{ steps.check-python.outputs.current-version }} → ${{ steps.check-python.outputs.latest-version }}"
                  fi
                  if [ "${{ steps.check-go.outputs.needs-update }}" = "true" ]; then
                    COMMIT_MSG="$COMMIT_MSG - Go: ${{ steps.check-go.outputs.current-version }} → ${{ steps.check-go.outputs.latest-version }}"
                  fi

                  git commit -m "$COMMIT_MSG"
                  git push origin main

            - name: Summary
              if: always()
              run: |
                  echo "## MLflow Version Update Summary" >> $GITHUB_STEP_SUMMARY
                  echo "| Component | Current | Latest | Update Needed |" >> $GITHUB_STEP_SUMMARY
                  echo "|-----------|---------|--------|---------------|" >> $GITHUB_STEP_SUMMARY
                  echo "| Python | ${{ steps.check-python.outputs.current-version || 'N/A' }} | ${{ steps.check-python.outputs.latest-version || 'N/A' }} | ${{ steps.check-python.outputs.needs-update || 'false' }} |" >> $GITHUB_STEP_SUMMARY
                  echo "| Go | ${{ steps.check-go.outputs.current-version || 'N/A' }} | ${{ steps.check-go.outputs.latest-version || 'N/A' }} | ${{ steps.check-go.outputs.needs-update || 'false' }} |" >> $GITHUB_STEP_SUMMARY

                  if [ "${{ steps.check-python.outputs.needs-update }}" = "true" ] || [ "${{ steps.check-go.outputs.needs-update }}" = "true" ]; then
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "✅ **Changes committed to main branch**" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "ℹ️ **No updates needed** - All versions are current" >> $GITHUB_STEP_SUMMARY
                  fi
