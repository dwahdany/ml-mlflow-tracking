name: Build Docker image

on:
    push:
        branches: [main, master]

jobs:
    build-mlflow:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            id-token: write
        env:
            REGISTRY: ghcr.io
            IMAGE_NAME: ${{ github.repository }}
            MLFLOW_VERSION: ""
            CACHE_PATH: /tmp/.buildx-cache-mlflow
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Read MLflow versions from config
              id: versions
              run: |
                  MLFLOW_VERSION=$(jq -r '.mlflow.python' .mlflow-versions.json)
                  MLFLOW_GO_VERSION=$(jq -r '.mlflow.go' .mlflow-versions.json)
                  echo "mlflow-version=$MLFLOW_VERSION" >> $GITHUB_OUTPUT
                  echo "mlflow-go-version=$MLFLOW_GO_VERSION" >> $GITHUB_OUTPUT
                  echo "Using MLflow Python version: $MLFLOW_VERSION"
                  echo "Using MLflow Go version: $MLFLOW_GO_VERSION"

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  driver: docker-container

            - name: Log into registry ${{ env.REGISTRY }}
              if: github.event_name != 'pull_request'
              uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=raw,value=mlflow-${{ steps.versions.outputs.mlflow-version }}
                      type=raw,value=latest

            - name: Build and push Docker image
              id: build-and-push
              uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
              with:
                  context: .
                  file: ./Dockerfile
                  build-args: |
                      MLFLOW_BACKEND=python
                      MLFLOW_VERSION=${{ steps.versions.outputs.mlflow-version }}
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha,scope=mlflow-python
                  cache-to: type=gha,mode=max,scope=mlflow-python

            - name: Install cosign
              uses: sigstore/cosign-installer@v3.4.0

            - name: Sign the published Docker image
              if: ${{ github.event_name != 'pull_request' }}
              env:
                  TAGS: ${{ steps.meta.outputs.tags }}
                  DIGEST: ${{ steps.build-and-push.outputs.digest }}
              run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

    build-mlflow-go:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            id-token: write
        env:
            REGISTRY: ghcr.io
            IMAGE_NAME: ${{ github.repository }}
            MLFLOW_GO_VERSION: ""
            CACHE_PATH: /tmp/.buildx-cache-mlflow-go
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Read MLflow versions from config
              id: versions
              run: |
                  MLFLOW_VERSION=$(jq -r '.mlflow.python' .mlflow-versions.json)
                  MLFLOW_GO_VERSION=$(jq -r '.mlflow.go' .mlflow-versions.json)
                  echo "mlflow-version=$MLFLOW_VERSION" >> $GITHUB_OUTPUT
                  echo "mlflow-go-version=$MLFLOW_GO_VERSION" >> $GITHUB_OUTPUT
                  echo "Using MLflow Python version: $MLFLOW_VERSION"
                  echo "Using MLflow Go version: $MLFLOW_GO_VERSION"

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  driver: docker-container

            - name: Log into registry ${{ env.REGISTRY }}
              if: github.event_name != 'pull_request'
              uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=raw,value=mlflow-go-${{ steps.versions.outputs.mlflow-go-version }}
                      type=raw,value=go-latest
            - name: Build and push Docker image
              id: build-and-push
              uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
              with:
                  context: .
                  file: ./Dockerfile
                  build-args: |
                      MLFLOW_BACKEND=go
                      MLFLOW_GO_VERSION=${{ steps.versions.outputs.mlflow-go-version }}
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha,scope=mlflow-go
                  cache-to: type=gha,mode=max,scope=mlflow-go

            - name: Install cosign
              uses: sigstore/cosign-installer@v3.4.0

            - name: Sign the published Docker image
              if: ${{ github.event_name != 'pull_request' }}
              env:
                  TAGS: ${{ steps.meta.outputs.tags }}
                  DIGEST: ${{ steps.build-and-push.outputs.digest }}
              run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
